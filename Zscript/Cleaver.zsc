//---------------------------------------------
// Meat Cleaver based on Potetbloke's Combat Knife	-Slogstin
//---------------------------------------------

class HDFlyingCleaver:IdleDummy{
	default{
		+bloodlessimpact +nodecal +hittracer +puffonactors
		stamina 2;
	}
}

const HDLD_CLEAVER="CLV";

class HDCleaver:HDCleaverWeapon{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	bool flicked;
	bool washolding;
	
		double initangleto;
	double inittangle;
	double inittz;
	vector3 initpos;
	vector3 initvel;
	
	default{
		+WEAPON.MELEEWEAPON +WEAPON.NOALERT +WEAPON.NO_AUTO_SWITCH
		+hdweapon.fitsinbackpack
		//-hdweapon.dontnull
		-weapon.cheatnotweapon
		-nointeraction
		-inventory.untossable
		+forcepain
		+forceXYbillboard
		+rollsprite
		+rollcenter
		+hdweapon.reverseguninertia
		+nodamagethrust
		radius 3;height 3;
		inventory.pickupmessage "You got the Cleaver! Chop chop!";
		hdweapon.barrelsize 1,1,1;
		obituary "%o got chopped by %k.";
		attacksound "*fist";
		weapon.selectionorder 100;
		weapon.kickback 15;
		weapon.bobstyle "Alpha";
		weapon.bobspeed 2.6;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.5;
		weapon.slotnumber 1;
		weapon.slotpriority 2.1;
		scale 0.4;
		//+FLATSPRITE
		DamageFunction (random(30,40));
		tag "Cleaver";
		hdweapon.refid HDLD_CLEAVER;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse);}
	
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let ww=HDCleaver(hdw);
		if(ww.targethealth)sb.drawwepnum(ww.targethealth,ww.targetspawnhealth);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Swing\n"
		..WEPHELP_ALTFIRE.."   Lunge\n"
		..WEPHELP_FIREMODE.."   Prepare throw\n"
		//..WEPHELP_UNLOAD.."   Distracting projectile\n"
		;
	}
	
	override string,double getpickupsprite(){return "CLVRX0",0.35;}
	
	override double weaponbulk(){
		return 25;
	}
	override double gunmass(){
		return 6;
	}
	
	action void A_Lunge(){
		hdplayerpawn hdp=hdplayerpawn(self);
		if(hdp){
			if(hdp.fatigue>=30){setweaponstate("hold");return;}
			else hdp.fatigue+=3;
		}
		A_Recoil(min(hdp.overloaded*0.6,4.)-4.);
	}
	
	//for throwing a weapon
	override inventory CreateTossable(int amt){
		let onr=hdplayerpawn(owner);
		bool throw=(
			onr
			&&onr.player
			&&onr.player.cmd.buttons&BT_ZOOM
		);
		bool isreadyweapon=onr&&onr.player&&onr.player.readyweapon==self;
		if(!isreadyweapon)throw=false;
		let thrown=super.createtossable(amt);
		if(!thrown)return null;
		let newwep=GetSpareWeapon(onr,doselect:isreadyweapon);
		hdweapon(thrown).bjustchucked=true;
		thrown.target=onr;
		thrown.lastenemy=onr;
		if(throw){
			thrown.bmissile=true;
			//a_setangle(-90+angle);
			thrown.bFLATSPRITE=true;
			thrown.bNOEXTREMEDEATH=true;
			thrown.bBOUNCEAUTOOFF=true;
		}else{
			thrown.bmissile=false;
			thrown.bFLATSPRITE=false;
			thrown.bNOEXTREMEDEATH=false;
			thrown.bBOUNCEAUTOOFF=false;
			}
		return thrown;
	}
	//an override is needed because DropInventory will undo anything done in CreateTossable
	double throwvel;
	override void OnDrop(Actor dropper){
		if(bjustchucked&&target){
			double cp=cos(target.pitch);
			if(bmissile){
				vel=target.vel+
					(cp*(cos(target.angle),sin(target.angle)),-sin(target.pitch))
					*min(20,800/weaponbulk())
					*(hdplayerpawn(target)?hdplayerpawn(target).strength:1.5)
				;
			}else vel=target.vel+(cp*(cos(target.angle),sin(target.angle)),-sin(target.pitch))*4;
			throwvel=vel dot vel;
			bjustchucked=false;
		}

		//copypasted from HDPickup
		if(dropper){
			setz(dropper.pos.z+dropper.height*0.8);
			if(!bmissile){
				double dp=max(dropper.pitch-6,-90);
				vel=dropper.vel+(
					cos(dp)*(cos(dropper.angle),sin(dropper.angle)),
					-sin(dp)
				)*3;
			}
			HDBackpack.ForceUpdate(dropper);
		}
	}

	override void DoEffect(){
		super.DoEffect();
		if(targettimer<70)targettimer++;else{
			tracer=null;
			targettimer=0;
			targethealth=0;
		}
	}
	action void HDChop(double dmg, int pb_angle=0, int pb_rotation=0,
							int pb_pitch=0,class<Actor> pb_pufftype="HDCleaverSparkL"){
		flinetracedata punchline;
		bool punchy=linetrace(
			angle+pb_angle,53,pitch+pb_pitch,
			TRF_NOSKY,
			offsetz:height-12,
			data:punchline
		);
		
		LineAttack(angle+pb_angle,53,pitch+pb_pitch,punchline.hitline?(countinv("HDZerk")>PBZERK_COOLOFF?random(50,120):random(5,15)):0,"none",
			pb_pufftype,
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
		);
		
		//pb_pufftype.roll=45;
		
		LineAttack(angle+pb_angle,53,pitch+pb_pitch,punchline.hitline?(countinv("HDZerk")>PBZERK_COOLOFF?random(50,120):random(5,15)):0,"none",
			"HDCleaverPuff",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
			
		);
		
		//setweaponstate("IGOTEM",5);

		if(!punchline.hitactor){
			HDF.Give(self,"WallChunkAmmo",1);
			return;
		}
		actor punchee=punchline.hitactor;

		//charge!
		if(invoker.flicked)dmg*=1.5;
		else{
			double twe=0;
			if(!!punchee)twe=HDMath.TowardsEachOther(self,punchee);
			else twe=(punchline.hitlocation-pos).length()-(punchline.hitlocation-(pos+vel)).length();
			dmg+=twe*3;
		}

		//come in swinging
		let onr=hdplayerpawn(self);
		double ptch=0.;
		double pyaw=0.;
		if(onr){
			ptch=deltaangle(onr.lastpitch,onr.pitch);
			pyaw=deltaangle(onr.lastangle,onr.angle);
			double iy=(-ptch - pyaw);

			if(player.onground)dmg+=min(abs(iy)*5,dmg*3);
		}

		//shit happens
		//dmg*=frandom(0.85,1.5);
		HDBleedingWound.inflict(punchee,int(dmg*frandom(0.85,1.5)),8);


		//other effects
		if(
			onr
			&&!punchee.bdontthrust
			&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			double iyaw=player.cmd.yaw*(65535./360.);
			if(abs(iyaw)>(0.5)){
				punchee.A_SetAngle(punchee.angle-iyaw*100,SPF_INTERPOLATE);
			}
			double ipitch=player.cmd.pitch*(65535./360.);
			if(abs(ipitch)>(0.5*65535/360)){
				punchee.A_SetPitch(punchee.angle+ipitch*100,SPF_INTERPOLATE);
			}
		}
		//headshot lol
		if(
			!punchee.bnopain
			&&punchee.health>0
			&&!(punchee is "HDBarrel")
			&&punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			punchee.InStateSequence(curstate,resolvestate("falldown"));
			dmg*=frandom(1.8,2.1);
		}

		if(hd_debug){
			string pch="";
			if(punchee.player)pch=punchee.player.getusername();
				else pch=punchee.getclassname();
			A_Log(string.format("Hit %s for %i damage!",pch,dmg));
		}
		
		
		//hit sound
		if(punchee.bnoblood)
		{
		if(dmg*2>punchee.health)punchee.A_StartSound("Cleaver/wall",CHAN_BODY,0,1.25);
		}
		else 
		{
		punchee.A_StartSound("Cleaver/flesh",CHAN_BODY,0,0.5);
		if(dmg*2>punchee.health)punchee.A_StartSound("Cleaver/flesh",CHAN_7,0,1);
		//if(dmg*2>punchee.health)punchee.A_StartSound("weapons/kharonsplat",CHAN_6,0,1);
		}
		
		hdmobbase.forcepain(punchee);
		punchee.InStateSequence(curstate,resolvestate("falldown"));
		//punchee.InStateSequence(curstate,resolvestate("falldown"));
		
		if(punchee.health>0)punchee.damagemobj(self,self,int(dmg),"SmallArms3");
		else punchee.damagemobj(self,self,int(dmg*1.1),"SmallArms3");
		
		LineAttack(angle,53,pitch,punchline.hitline?(countinv("HDZerk")>PBZERK_COOLOFF?random(50,120):random(5,15)):0,"none",
			pb_pufftype,
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}

	states{
	
/*	select:
		TNT1 A 0{
			//these two don't actually work???
			A_OverlayFlags(PSP_WEAPON,PSPF_CVARFAST|PSPF_POWDOUBLE,false);
			A_OverlayFlags(PSP_FLASH,PSPF_CVARFAST|PSPF_POWDOUBLE,false);

			A_WeaponBusy();
			A_SetCrosshair(21);
			A_SetHelpText();
			
			invoker.weaponstatus[FRAGS_FORCE]=0;

			return resolvestate("select0");
		}*/
		select0:
		CLVR A 0;
		goto select0small;
	deselect:
		TNT1 A 0 A_StartDeselect();
	deselect0:
		CLVR A 0;
		goto deselect0small;
		
	ready:
		CLVR A 1{
			if(invoker.washolding&&pressingfire()){
				setweaponstate("nope");
				return;
			}
			A_WeaponReady(WRF_ALL);
			invoker.flicked=false;
			invoker.washolding=false;
		}goto readyend;
	fire:	
	firehold:
	startverti:
		#### A 0 A_JumpIfInventory("HDZerk",PBZERK_COOLOFF,"zerkvertistart");
		CLVR A 0 A_StartSound("weapons/pocket",CHAN_6);
		CLVR ABCD 2;
		SBVW C 0 A_WeaponBusy;
		goto holdverti;
	zerkvertistart:
		CLVR A 0 A_StartSound("weapons/pocket",CHAN_6);
		CLVR ABCD 1;
		#### # 0 A_WeaponBusy;
		goto holdverti;
	holdverti:
		CLVR D 1; //A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		#### A 0 A_JumpIf(pressingreload(),"VertiSwingWithdraw");
		TNT1 A 0 A_ReFire("holdverti");
	goto vertiswinghard;
	vertiswingreturn:
		TNT1 A 3;
		TNT1 A 2 A_StartSound("weapons/pocket",CHAN_6);
	goto holdverti;
	vertiswinghard:
		#### A 0 A_JumpIfInventory("HDZerk",PBZERK_COOLOFF,"zerkvertiswinghard");
		CLVR EF 1;
		#### A 0 A_Overlay(5,"hitcheckvertical",false);
		#### A 0 
		{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=1;
			A_StartSound("Cleaver/swing",CHAN_7);
		}

		CLVR GHI 1;
		TNT1 A 1;
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
//		TNT1 AAAAAA 1 A_JumpIf(pressingaltfire(),"swingverti");
//		#### A 0 A_JumpIf(pressingfire(),"swingverti");
//		#### A 0 A_JumpIf(pressingaltfire(),"HoriSwingHard");
//		TNT1 A 0 A_ReFire("startfire");
		TNT1 A 0 A_WeaponBusy;
		goto vertirecoverswing;
		
	Vertirecoverswing:
		TNT1 A 3;
		CLVR JKLM 1;
		#### A 0 A_JumpIf(pressingaltfire(),"nope");
		#### A 0 A_JumpIf(pressingfiremode(),"nope");
		#### A 0 A_JumpIf(pressingfire(),"startverti");
		goto nope;
		
	VertiSwingWithdraw:
		CLVR DCBA 2;
		CLVR A 2;
		goto nope;
		
	zerkvertiswinghard:
		CLVR EF 1;
//		TNT1 A 1;
		#### A 0 A_Overlay(5,"hitcheckzerkvertical",false);
		SBVS A 0 
		{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=1;
			A_StartSound("Cleaver/swing",CHAN_7);
		}
		CLVR GHI 1;
		TNT1 A 2;
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
//		TNT1 A 3;
//		#### A 0 A_JumpIf(pressingfire(),"swingreturn");
//		#### A 0 A_JumpIf(pressingaltfire(),"startfire");
//		TNT1 A 0 A_ReFire("startfire");
		TNT1 A 0 A_WeaponBusy;
		goto vertirecoverswing;
		
	reload:
		goto nope;
		
	altfire:
		#### A 2 A_CheckFloor("lunge");
		goto nope;
	lunge:
		CLVR A 0 A_Lunge();
		#### A 1{
			if(countinv("HDZerk")>PBZERK_COOLOFF)A_Recoil(-random(12,24));
		}
		#### A 1 A_Recoil(-5);
		CLVR A 0 A_StartSound("weapons/pocket",CHAN_6);
		CLVR ABCD 2;
		CLVR D 3;
	goto VertiSwingHard;
	
	unload:
	goto nope;
	
	
	hitcheckvertical:
		TNT1 A 1
		{
		HDChop(18,0,0,0);
//		HDChop(30);
		HDChop(18,0,0,0);
		}
	stop;
	
	hitcheckzerkvertical:
		TNT1 AA 1 HDChop(invoker.flicked?340:300);
	stop;
	
	
	grabhold:
		CLVR D 1 {invoker.weaponstatus[FRAGS_FORCE]=50;}
		TNT1 A 0 A_JumpIf(pressingfire(),"YEET");
		TNT1 A 0 A_JumpIf(pressingfiremode(),"grabhold");
		goto nope;
	firemode:
	grab:
	grab2:
		CLVR ABCD 2;
		goto grabhold;
	YEET:
		---- A 1
		{
		if(player&&hdweapon(player.readyweapon)){
		 player.cmd.buttons|=BT_ZOOM;
		 DropInventory(player.readyweapon);
		}
		}
		TNT1 A 0;
		goto nope;
	spawn:
		CLVR X 0 A_JumpIf(invoker.bNOEXTREMEDEATH==true,"spawn2");
		CLVR X 1;
		loop;
	spawn2:
		CLVR Y 1 {A_Setpitch(25+pitch);
//				A_SetRoll(80);
		}
		loop;
	spawn3:
		CLVR Y 1;
		//	{setorigin((pos+tracer.pos)*0.5,true);}
		loop;
	
	
	death:
		CLVR Y 1 {
		invoker.bjustchucked=false;
		A_SpawnItemEx("BulletPuffSmall");
		A_NoGravity();
			if(tracer){
			
				let hdt=hdmobbase(tracer);
				
				if(
					pos.z-tracer.pos.z>tracer.height*0.8
					&&(
						!hdt
						||(
							!hdt.bnovitalshots
							&&!hdt.bheadless
						)
					)
				){
					if(hd_debug)A_Log("HEAD SHOT");
					bpiercearmor=true;
					damagemobj(tracer,self,75,"slashing");
				}
				
				if(tracer.bnoblood)
				{
				HDBleedingWound.inflict(tracer,60);
				}
				else 
				{
				HDBleedingWound.inflict(tracer,60);
				}
			}
		}
		goto spawn3;
	Xdeath:
		CLVR Y 1 {
		invoker.bjustchucked=false;
			if(tracer){
			
				let hdt=hdmobbase(tracer);
				
				if(
					pos.z-tracer.pos.z>tracer.height*0.8
					&&(
						!hdt
						||(
							!hdt.bnovitalshots
							&&!hdt.bheadless
						)
					)
				){
					if(hd_debug)A_Log("HEAD SHOT");
					bpiercearmor=true;
					damagemobj(tracer,self,150,"slashing");
				}
				
				if(tracer.bnoblood)
				{
				HDBleedingWound.inflict(tracer,120);
				}
				else 
				{
				HDBleedingWound.inflict(tracer,120);
				}
			}
		}
		goto spawn3;
	Crash:
		CLVR Y 1 {
		invoker.bjustchucked=false;
			if(tracer){
			
				let hdt=hdmobbase(tracer);
				
				if(
					pos.z-tracer.pos.z>tracer.height*0.8
					&&(
						!hdt
						||(
							!hdt.bnovitalshots
							&&!hdt.bheadless
						)
					)
				){
					if(hd_debug)A_Log("HEAD SHOT");
					bpiercearmor=true;
					damagemobj(tracer,self,75,"slashing");
				}
			
			
				if(tracer.bnoblood)
				{
				HDBleedingWound.inflict(tracer,35,7);
				}
				else 
				{
				HDBleedingWound.inflict(tracer,35,7);
				A_StartSound("weapons/kharoncut",CHAN_7,volume:0.6);
				}
			}
		}
		goto spawn3;
	ohnomyknife:
		tnt1 a 0;
		stop;
	}
}